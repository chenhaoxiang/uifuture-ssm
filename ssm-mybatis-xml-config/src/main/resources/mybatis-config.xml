<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- 引入属性文件 classpath就是resource下-->
    <properties resource="jdbc.properties">
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
        <!-- Enable this feature -->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!-- Change default value of separator -->
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
    </properties>

    <settings>
        <!--全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。默认值为true-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值为false-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考lazyLoadTriggerMethods). 默认值在MyBatis版本<=3.4.1以前为true，在3.4.1以后默认值为false-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--是否允许单一语句返回多结果集（需要兼容驱动,如果驱动不支持单一语句返回多结果，则该配置无用）。默认值为true-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值为true-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。默认为false-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。
         NONE 表示取消自动映射
         PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集
         FULL 会自动映射任意复杂的结果集（无论是否嵌套）
         默认值为PARTIAL-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或者未知属性类型）的行为。
        NONE: 不做任何反应
        WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
        FAILING: 映射失败 (抛出 SqlSessionException)
        默认值为NONE-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。
        SIMPLE 就是普通的执行器
        REUSE 执行器会重用预处理语句（prepared statements）
        BATCH 执行器将重用语句并执行批量更新
        默认值为SIMPLE-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。没有默认值-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。没有默认值-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。默认值为false-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。默认值为true-->
        <setting name="safeResultHandlerEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。默认值为false-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
        默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
        若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。默认值为OTHER-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定对象的哪个方法触发一次延迟加载。可以配置多个，使用逗号隔开-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--指定动态 SQL 生成的默认语言。 值为一个类型别名或完全限定类名。默认值为org.apache.ibatis.scripting.xmltags.XMLLanguageDriver-->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!--<setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.defaults.RawLanguageDriver"/>-->

        <!--指定 Enum 使用的默认 TypeHandler 。 (从3.4.5开始) 。默认值为org.apache.ibatis.type.EnumTypeHandler -->
        <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。
        默认值为false-->
        <setting name="callSettersOnNulls" value="false"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）
        默认值为false-->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。默认值没有指定。
        	SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING-->
        <setting name="logPrefix" value="SLF4J"/>
        <!--指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。CGLIB | JAVASSIST
        在MyBatis3.3以上为JAVASSIST -->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!--指定VFS（虚拟文件系统(VFS),用来读取服务器里的资源）的实现，自定义VFS的实现的类全限定名，以逗号分隔。
        在应用服务中提供非常简单API访问资源文件。不同的应用服务器有不同的文件结构，有些特殊的需要进行适配
        基本不会用到，除非有特定的环境要求，需要不同的资源反射-->
        <!--<setting name="vfsImpl" value=""/>-->
        <!--允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。（从3.4.1开始）-->
        <setting name="useActualParamName" value="true"/>
        <!--指定一个提供Configuration实例的类（Configuration类主要是用来存储对Mybatis的配置文件及Mapper文件解析后的数据）。 这个被返回的Configuration实例用来加载被反序列化对象的懒加载属性值。 这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)
        类型别名或者全类名.-->
        <!--<setting name="configurationFactory" value=""/>-->
    </settings>

    <typeAliases>
        <!-- type指的是Java Bean的完全限定名   alias就是指别名-->
        <typeAlias type="com.uifuture.chapter12.entity.Users" alias="users"/>
        <typeAlias type="com.uifuture.chapter12.entity.Blog" alias="blog"/>
        <typeAlias type="com.uifuture.chapter12.entity.BlogExt" alias="blogExt"/>
        <typeAlias type="com.uifuture.chapter12.entity.Post" alias="post"/>
        <!--<package name="com.uifuture.chapter10.entity"/>-->
    </typeAliases>

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC">
                <!--在这里可以再配置property键值对-->
            </transactionManager>
            <!--数据库连接实例的数据源（DataSource）配置-->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username?:root}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库厂商起别名-->
        <property name="SQL Server" value="sqlserver"/>
        <property name="Oracle" value="oracle"/>
        <property name="MySQL" value="mysql"/>
    </databaseIdProvider>

    <!-- 使用相对于类路径的资源引用 -->
    <!--<mappers>-->
    <!--<mapper resource="com/uifuture/chapter10/mapper/UsersMapper.xml"></mapper>-->
    <!--</mappers>-->

    <!-- 使用完全限定资源定位符（URL） -->
    <!--<mappers>-->
    <!--<mapper url="file:///D:/github/uifuture-ssm/chapter-10-mybatis-xml-config/src/main/java/com/uifuture/chapter10/mapper/UsersMapper.xml"/>-->
    <!--</mappers>-->
    <!-- 使用映射器接口实现类的完全限定类名 -->
    <!--<mappers>-->
    <!--<mapper class="com.uifuture.chapter10.mapper.UsersMapper" />-->
    <!--</mappers>-->
    <!--将包内的映射器接口实现全部注册为映射器 -->
    <!--<mappers>-->
    <!--<package name="com.uifuture.chapter10"/>-->
    <!--</mappers>-->
    <!--需要注意的是，上面几种情况，在不使用注解注入的情况下，都需要接口和XML配置文件在一个包下，且确保除了后缀名不同，名称相同-->


    <!-- 当在不同的路径下的时候,不使用注解,可以这样配置 -->
    <mappers>
        <!-- 扫描路径下的mapper映射文件 -->
        <mapper resource="com/uifuture/chapter12/mapper/UsersMapper.xml"/>
        <mapper resource="com/uifuture/chapter12/mapper/PostMapper.xml"/>
        <mapper resource="com/uifuture/chapter12/mapper/BlogMapper.xml"/>
        <!-- 扫描包下的接口文件 -->
        <package name="com.uifuture.chapter12.dao.UsersMapper"/>
        <package name="com.uifuture.chapter12.dao.BlogMapper"/>
        <package name="com.uifuture.chapter12.dao.PostMapper"/>
    </mappers>

</configuration>